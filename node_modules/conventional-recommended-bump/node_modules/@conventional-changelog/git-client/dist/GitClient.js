import { spawn } from 'child_process';
import { firstFromStream, splitStream } from '@simple-libs/stream-utils';
import { output, outputStream } from '@simple-libs/child-process-utils';
import { formatArgs, toArray } from './utils.js';
const SCISSOR = '------------------------ >8 ------------------------';
/**
 * Wrapper around Git CLI.
 */
export class GitClient {
    cwd;
    debug;
    constructor(cwd, debug) {
        this.cwd = cwd;
        this.debug = debug;
    }
    formatArgs(...args) {
        const finalArgs = formatArgs(...args);
        if (this.debug) {
            this.debug(finalArgs);
        }
        return finalArgs;
    }
    /**
     * Raw exec method to run git commands.
     * @param args
     * @returns Stdout string output of the command.
     */
    async exec(...args) {
        return (await output(spawn('git', this.formatArgs(...args), {
            cwd: this.cwd
        }))).toString().trim();
    }
    /**
     * Raw exec method to run git commands with stream output.
     * @param args
     * @returns Stdout stream of the command.
     */
    execStream(...args) {
        return outputStream(spawn('git', this.formatArgs(...args), {
            cwd: this.cwd
        }));
    }
    /**
     * Initialize a new git repository.
     * @returns Boolean result.
     */
    async init() {
        try {
            await this.exec('init');
            return true;
        }
        catch (err) {
            return false;
        }
    }
    /**
     * Get raw commits stream.
     * @param params
     * @param params.path - Read commits from specific path.
     * @param params.from - Start commits range.
     * @param params.to - End commits range.
     * @param params.format - Commits format.
     * @yields Raw commits data.
     */
    async *getRawCommits(params = {}) {
        const { path, from = '', to = 'HEAD', format = '%B', ignore, reverse, merges, since } = params;
        const shouldNotIgnore = ignore
            ? (chunk) => !ignore.test(chunk)
            : () => true;
        const stdout = this.execStream('log', `--format=${format}%n${SCISSOR}`, since && `--since=${since instanceof Date ? since.toISOString() : since}`, reverse && '--reverse', merges && '--merges', merges === false && '--no-merges', [from, to].filter(Boolean).join('..'), ...path ? ['--', ...toArray(path)] : []);
        const commitsStream = splitStream(stdout, `${SCISSOR}\n`);
        let chunk;
        for await (chunk of commitsStream) {
            if (shouldNotIgnore(chunk)) {
                yield chunk;
            }
        }
    }
    /**
     * Get tags stream.
     * @param params
     * @yields Tags
     */
    async *getTags(params = {}) {
        const { path, from = '', to = 'HEAD', since } = params;
        const tagRegex = /tag:\s*(.+?)[,)]/gi;
        const stdout = this.execStream('log', '--decorate', '--no-color', '--date-order', since && `--since=${since instanceof Date ? since.toISOString() : since}`, [from, to].filter(Boolean).join('..'), ...path ? ['--', ...toArray(path)] : []);
        let chunk;
        let matches;
        let tag;
        for await (chunk of stdout) {
            matches = chunk.toString().trim().matchAll(tagRegex);
            for ([, tag] of matches) {
                yield tag;
            }
        }
    }
    /**
     * Get last tag.
     * @param params
     * @returns Last tag, `null` if not found.
     */
    async getLastTag(params) {
        return firstFromStream(this.getTags(params));
    }
    /**
     * Check file is ignored via .gitignore.
     * @param file - Path to target file.
     * @returns Boolean value.
     */
    async checkIgnore(file) {
        try {
            await this.exec('check-ignore', '--', file);
            return true;
        }
        catch (err) {
            return false;
        }
    }
    /**
     * Add files to git index.
     * @param files - Files to stage.
     */
    async add(files) {
        await this.exec('add', '--', ...toArray(files));
    }
    /**
     * Commit changes.
     * @param params
     * @param params.verify
     * @param params.sign
     * @param params.files
     * @param params.allowEmpty
     * @param params.message
     */
    async commit(params) {
        const { verify = true, sign = false, files = [], allowEmpty = false, message } = params;
        await this.exec('commit', !verify && '--no-verify', sign && '-S', allowEmpty && '--allow-empty', '-m', message, '--', ...files);
    }
    /**
     * Create a tag for the current commit.
     * @param params
     * @param params.sign
     * @param params.name
     * @param params.message
     */
    async tag(params) {
        let { sign = false, name, message } = params;
        if (sign) {
            message = '';
        }
        await this.exec('tag', sign && '-s', message && '-a', ...message ? ['-m', message] : [], '--', name);
    }
    /**
     * Get current branch name.
     * @returns Current branch name.
     */
    async getCurrentBranch() {
        const branch = await this.exec('rev-parse', '--abbrev-ref', 'HEAD');
        return branch;
    }
    /**
     * Get default branch name.
     * @returns Default branch name.
     */
    async getDefaultBranch() {
        const branch = (await this.exec('rev-parse', '--abbrev-ref', 'origin/HEAD')).replace(/^origin\//, '');
        return branch;
    }
    /**
     * Push changes to remote.
     * @param branch
     * @param params
     * @param params.verify
     */
    async push(branch, params = {}) {
        const { verify = true, tags = false, followTags = false, force = false } = params;
        await this.exec('push', followTags && '--follow-tags', tags && '--tags', !verify && '--no-verify', force && '--force', 'origin', '--', branch);
    }
    /**
     * Verify rev exists.
     * @param rev
     * @param safe - If `true`, will not throw error if rev not found.
     * @returns Target hash.
     */
    async verify(rev, safe) {
        let git = this.exec('rev-parse', '--verify', rev);
        if (safe) {
            git = git.catch(() => '');
        }
        return await git;
    }
    /**
     * Get config value by key.
     * @param key - Config key.
     * @returns Config value.
     */
    async getConfig(key) {
        return await this.exec('config', '--get', '--', key);
    }
    /**
     * Set config value by key.
     * @param key - Config key.
     * @param value - Config value.
     */
    async setConfig(key, value) {
        await this.exec('config', '--', key, value);
    }
    /**
     * Fetch changes from remote.
     * @param params
     */
    async fetch(params = {}) {
        const { prune = false, unshallow = false, tags = false, all = false, remote, branch } = params;
        await this.exec('fetch', prune && '--prune', unshallow && '--unshallow', tags && '--tags', all && '--all', ...remote && branch ? [
            '--',
            remote,
            branch
        ] : []);
    }
    /**
     * Create a new branch.
     * @param branch - Branch name.
     */
    async createBranch(branch) {
        await this.exec('checkout', '-b', branch);
    }
    /**
     * Delete a branch.
     * @param branch - Branch name.
     */
    async deleteBranch(branch) {
        await this.exec('branch', '-D', '--', branch);
    }
    /**
     * Checkout a branch.
     * @param branch - Branch name.
     */
    async checkout(branch) {
        await this.exec('checkout', branch);
    }
}
//# sourceMappingURL=data:application/json;base64,